---
title: "notes"
format: html
editor: visual
---

## Notes

The example of the vignette illustrate how to:

1.  simulate multiple data sets that can be used to create operating characteristics of a model
2.  simulate multiple data sets that can be used to calibrate a Bayesian model

However, they only demonstrate the second. The first seems to be possible through a proper modification of the generate data function.

I THINK it can be done by sending paramters to the generate data function based on the branch/replication. I just don't know if you that is possible.

It seems it's possible with the pattern statement - which has an example in tar_targets, but I have not seen one on the target_stan documentation.

from google AI:

``` R
# _targets.R
library(targets)
library(stantargets)

# Define a function to simulate data
simulate_data <- function(n_obs, mean_val, sd_val) {
  list(
    N = n_obs,
    y = rnorm(n_obs, mean = mean_val, sd = sd_val)
  )
}

# Stan model file (my_model.stan)
# data {
#   int<lower=0> N;
#   array[N] real y;
# }
# parameters {
#   real mu;
#   real<lower=0> sigma;
# }
# model {
#   y ~ normal(mu, sigma);
#   mu ~ normal(0, 10);
#   sigma ~ lognormal(0, 1);
# }

list(
  # Define different data generation scenarios
  tar_target(
    name = data_scenarios,
    command = expand.grid(
      n_obs = c(50, 100),
      mean_val = c(0, 5),
      sd_val = c(1, 2)
    )
  ),

  # Use tar_stan_mcmc_rep_summary to run MCMC for each scenario
  # The 'data' argument will be branched over based on 'data_scenarios'
  tar_stan_mcmc_rep_summary(
    name = my_model_summary,
    stan_files = "my_model.stan",
    data = tar_group_by(simulate_data(data_scenarios$n_obs, data_scenarios$mean_val, data_scenarios$sd_val), .by = everything()),
    reps = 2, # Run each scenario twice
    # You can also use pattern = map(data_scenarios) here if simulate_data
    # was defined outside and directly used data_scenarios$n_obs etc.
    # Stantargets handles the dynamic branching for 'data' internally
  )
)
```
